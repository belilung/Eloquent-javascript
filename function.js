/**
 * Created by Андрей on 23.04.2016.
 */
/*
 1. Треугольник. Напишите цикл,  выводит такой треугольник:
 */
function triangle(){
    var s = "";
    for(var i = 0; i < 10; i++){
        for(var j = 0; j < i; j++){
            s += "#";
        }
        s +=  '\n';
    }
    return s;
}

/*
 2. FizzBuzz. Напишите программу, которая выводит через console.log все числа от 1 до 100, с двумя исключениями.
 Для чисел, нацело делящихся на 3, она должна выводить ‘Fizz’, а для чисел, делящихся на 5 (но не на 3) – ‘Buzz’.
 Когда сумеете – исправьте её так, чтобы она выводила «FizzBuzz» для всех чисел, которые делятся и на 3 и на 5.
 */
function FizzBuzz(){
    for(var i = 0; i <= 100; i++){
        if(i % 3 == 0){
            console.log("Fizz");
        } else if(i % 5 == 0){
            console.log("Buzz");
        } else console.log(i);

        if((i % 3 == 0) && (i % 5 == 0)) {
            console.log("FizzBuzz");
        }
    }
}

/*
 3. Шахматная доска. Напишите программу, создающую строку, содержащую решётку 8х8, в которой линии разделяются символами новой строки.
 На каждой позиции либо пробел, либо #. В результате должна получиться шахматная доска.
 */
function chease(){
    var s = "";
    s += '\n';
    for(var i = 0; i < 8; i++){
        for(var j = 0; j < 4; j++){
            if(i % 2 == 0){
                s += "# ";
            } else s += " #";
        }
        s += '\n';
    }
    return s;
}

/*
*
*4. Минимум. Напишите функцию min, принимающую два аргумента, и возвращающую минимальный из них.
 */
function min(val1, val2){
    if(val1 < val2){
        return val1;
    } else return val2;
}

/*
*5. Рекурсия. Ноль чётный. Единица нечётная. У любого числа N чётность такая же, как у N-2.Напишите рекурсивную функцию
* isEven согласно этим правилам. Она должна принимать число и возвращать булевское значение. Потестируйте её на 50 и 75.
* Попробуйте задать ей -1. Почему она ведёт себя таким образом? Можно ли её как-то исправить?
 */
function isEven(number){
    if(number == 0){
        console.log("true");
        return number;
    } if(number == 1){
        console.log("false");
        return number;
    }
    if(number > 0){
        return isEven(number-2);
    } else {
        console.log("Number lessly 0");
        return number;
    }
}

/*
* 6. Считаем бобы. Символ номер N строки можно получить, добавив к ней .charAt(N) ( “строчка”.charAt(5) ) – схожим образом с получением длины строки при помощи .length.
* Возвращаемое значение будет строковым, состоящим из одного символа (к примеру, “к”).
* У первого символа строки позиция 0, что означает, что у последнего символа позиция будет string.length – 1. Другими словами, у
* строки из двух символов длина 2, а позиции её символов будут 0 и 1.Напишите функцию countBs, которая принимает строку в качестве аргумента,
*  и возвращает количество символов “B”, содержащихся в строке.Затем напишите функцию countChar, которая работает примерно как countBs, только
*  принимает второй параметр — символ, который мы будем искать в строке (вместо того, чтобы просто считать количество символов “B”).
*  ля этого переделайте функцию countBs.
 */
function countChar(string, char){
    var count = 0;
    for(var i = 0; i <= string.length - 1; i++){
        if(string.charAt(i) == char){
            count++;
        }
    }
    return count;
}

/*
7. Сумма диапазона.  Напишите функцию range, принимающую два аргумента, начало и конец диапазона, и возвращающую массив,
   который содержит все числа из него, включая начальное и конечное.Затем напишите функцию sum, принимающую массив чисел и
   возвращающую их сумму. Запустите указанную выше инструкцию и убедитесь, что она возвращает 55 (console.log(sum(range(1, 10))).
   В качестве бонуса дополните
   функцию range, чтобы она могла принимать необязательный третий аргумент – шаг для построения массива. Если он не задан,
   шаг равен единице. Вызов функции range(1, 10, 2) должен будет вернуть [1, 3, 5, 7, 9]. Убедитесь, что она работает с
   отрицательным шагом так, что вызов range(5, 2, -1) возвращает [5, 4, 3, 2].
 */
function range(parameters){
    var start = parameters.start;
    var end = parameters.end;
    var step = parameters.step ? parameters.step : 1;
    console.log(step);
    var array = [];

    if(step < 0){
        for(var i = end, j = 0; i >= start; i--){
            if(i % step == 0){
                array[j] = i;
                j++;
            }
        }
    } else {
        for(var i = start, j = 0; i <= end; i++){
            if(i % step == 0){
                array[j] = i;
                j++;
            }
        }
    }

    return array;
}

function sum(array){
    var sum = 0;

    for(var i = 0; i < array.length; i++){
        sum += array[i];
    }

    return sum;
}